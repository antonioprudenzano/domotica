{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Anto\\\\Desktop\\\\Things\\\\stage\\\\task-2 stage\\\\automationui\\\\src\\\\components\\\\Thermostat.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Card, Slider, Button } from \"antd\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport { FireOutlined, MinusCircleTwoTone } from \"@ant-design/icons\";\nimport { updateThermostatInfo, getThermostatInfo, deleteThermostat } from \"../Request\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Thermostat = props => {\n  _s();\n\n  const [thermostatInfo, setThermostatInfo] = React.useState(props.data);\n  const [tempSet, setTempSet] = React.useState(props.data.temperature_set);\n  const [available, setAvailable] = React.useState(true);\n\n  const thermostatDelete = async thermostatID => {\n    await deleteThermostat(thermostatID);\n  };\n\n  React.useEffect(() => {\n    async function initialSetup() {\n      let response = await getThermostatInfo(props.data.id);\n      setThermostatInfo(response.data);\n      setTempSet(response.data.temperature_set);\n    }\n\n    initialSetup();\n  }, [props.refresh]);\n  React.useEffect(() => {\n    const interval = setInterval(async () => {\n      let response = await getThermostatInfo(props.data.id);\n      setThermostatInfo(response.data);\n      setTempSet(response.data.temperature_set);\n    }, 13000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: available ? /*#__PURE__*/_jsxDEV(Card, {\n      title: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: 0\n          },\n          children: \"Thermostat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this), props.delete ? /*#__PURE__*/_jsxDEV(Button, {\n          size: \"small\",\n          danger: true,\n          type: \"text\",\n          icon: /*#__PURE__*/_jsxDEV(MinusCircleTwoTone, {\n            twoToneColor: \"#ff0000\",\n            onClick: e => {\n              thermostatDelete(thermostatInfo.id);\n              setAvailable(false);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(FireOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this),\n      bordered: false,\n      style: {\n        width: 200,\n        margin: \"20px 10px\",\n        height: \"330px\",\n        borderRadius: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(CircularProgressbarWithChildren, {\n        value: thermostatInfo.actual_temperature,\n        minValue: \"10\",\n        maxValue: \"30\",\n        circleRatio: 0.75,\n        styles: buildStyles({\n          rotation: 1 / 2 + 1 / 8,\n          trailColor: \"#eee\"\n        }),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: 20,\n            color: \"#3e98c7\",\n            textAlign: \"center\",\n            paddingTop: 20\n          },\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Current\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this), thermostatInfo.actual_temperature, \"\\xB0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          margin: 0\n        },\n        children: \"Set temperature\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        value: tempSet,\n        min: 10,\n        max: 30,\n        marks: {\n          10: \"10\",\n          30: \"30\"\n        },\n        onChange: val => setTempSet(val),\n        onAfterChange: val => updateThermostatInfo(thermostatInfo.id, JSON.stringify({\n          temperature_set: val\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) : false\n  }, void 0, false);\n};\n\n_s(Thermostat, \"Z59lPsS27syfA+bVBBaWrcthnMw=\");\n\n_c = Thermostat;\nexport default Thermostat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thermostat\");","map":{"version":3,"sources":["C:/Users/Anto/Desktop/Things/stage/task-2 stage/automationui/src/components/Thermostat.js"],"names":["React","Card","Slider","Button","CircularProgressbarWithChildren","buildStyles","FireOutlined","MinusCircleTwoTone","updateThermostatInfo","getThermostatInfo","deleteThermostat","Thermostat","props","thermostatInfo","setThermostatInfo","useState","data","tempSet","setTempSet","temperature_set","available","setAvailable","thermostatDelete","thermostatID","useEffect","initialSetup","response","id","refresh","interval","setInterval","clearInterval","display","flexDirection","justifyContent","alignItems","margin","delete","e","width","height","borderRadius","actual_temperature","rotation","trailColor","fontSize","color","textAlign","paddingTop","val","JSON","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Card, Slider, Button } from \"antd\";\r\nimport {\r\n  CircularProgressbarWithChildren,\r\n  buildStyles,\r\n} from \"react-circular-progressbar\";\r\nimport { FireOutlined, MinusCircleTwoTone } from \"@ant-design/icons\";\r\nimport {\r\n  updateThermostatInfo,\r\n  getThermostatInfo,\r\n  deleteThermostat,\r\n} from \"../Request\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\n\r\nconst Thermostat = (props) => {\r\n  const [thermostatInfo, setThermostatInfo] = React.useState(props.data);\r\n  const [tempSet, setTempSet] = React.useState(props.data.temperature_set);\r\n  const [available, setAvailable] = React.useState(true);\r\n\r\n  const thermostatDelete = async (thermostatID) => {\r\n    await deleteThermostat(thermostatID);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    async function initialSetup(){\r\n      let response = await getThermostatInfo(props.data.id);\r\n      setThermostatInfo(response.data);\r\n      setTempSet(response.data.temperature_set);\r\n    }\r\n    initialSetup()\r\n  }, [props.refresh]);\r\n\r\n  React.useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      let response = await getThermostatInfo(props.data.id);\r\n      setThermostatInfo(response.data);\r\n      setTempSet(response.data.temperature_set);\r\n    }, 13000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {available ? (\r\n        <Card\r\n          title={\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <p style={{ margin: 0 }}>Thermostat</p>\r\n              {props.delete ? (\r\n                <Button\r\n                  size=\"small\"\r\n                  danger\r\n                  type=\"text\"\r\n                  icon={\r\n                    <MinusCircleTwoTone\r\n                      twoToneColor=\"#ff0000\"\r\n                      onClick={(e) => {\r\n                        thermostatDelete(thermostatInfo.id);\r\n                        setAvailable(false);\r\n                      }}\r\n                    />\r\n                  }\r\n                />\r\n              ) : (\r\n                <FireOutlined />\r\n              )}\r\n            </div>\r\n          }\r\n          bordered={false}\r\n          style={{\r\n            width: 200,\r\n            margin: \"20px 10px\",\r\n            height: \"330px\",\r\n            borderRadius: \"10px\",\r\n          }}\r\n        >\r\n          <CircularProgressbarWithChildren\r\n            value={thermostatInfo.actual_temperature}\r\n            minValue=\"10\"\r\n            maxValue=\"30\"\r\n            circleRatio={0.75}\r\n            styles={buildStyles({\r\n              rotation: 1 / 2 + 1 / 8,\r\n              trailColor: \"#eee\",\r\n            })}\r\n          >\r\n            <p\r\n              style={{\r\n                fontSize: 20,\r\n                color: \"#3e98c7\",\r\n                textAlign: \"center\",\r\n                paddingTop: 20,\r\n              }}\r\n            >\r\n              <strong>\r\n                Current\r\n                <br />\r\n                {thermostatInfo.actual_temperature}°\r\n              </strong>\r\n            </p>\r\n          </CircularProgressbarWithChildren>\r\n          <h4 style={{ margin: 0 }}>Set temperature</h4>\r\n          <Slider\r\n            value={tempSet}\r\n            min={10}\r\n            max={30}\r\n            marks={{ 10: \"10\", 30: \"30\" }}\r\n            onChange={(val) => setTempSet(val)}\r\n            onAfterChange={(val) =>\r\n              updateThermostatInfo(\r\n                thermostatInfo.id,\r\n                JSON.stringify({ temperature_set: val })\r\n              )\r\n            }\r\n          />\r\n        </Card>\r\n      ) : (\r\n        false\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Thermostat;\r\n"]},"metadata":{},"sourceType":"module"}