[{"C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\index.js":"1","C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\reportWebVitals.js":"2","C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\App.js":"3","C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\pages\\Dashboard.js":"4","C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\Request.js":"5","C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\components\\Thermostat.js":"6","C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\components\\Light.js":"7"},{"size":500,"mtime":1613035596147,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1613035596147,"results":"10","hashOfConfig":"9"},{"size":162,"mtime":1613060852816,"results":"11","hashOfConfig":"9"},{"size":18240,"mtime":1617139146748,"results":"12","hashOfConfig":"9"},{"size":3228,"mtime":1617124049291,"results":"13","hashOfConfig":"9"},{"size":3805,"mtime":1617124022777,"results":"14","hashOfConfig":"9"},{"size":3301,"mtime":1617124142509,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"9juco0",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\index.js",[],["35","36"],"C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\reportWebVitals.js",[],"C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\App.js",[],"C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\pages\\Dashboard.js",["37"],"import React from \"react\";\r\nimport Light from \"../components/Light\";\r\nimport Thermostat from \"../components/Thermostat\";\r\nimport {\r\n  recognizeAudio,\r\n  getRooms,\r\n  getRoomByID,\r\n  addLight,\r\n  addThermostat,\r\n  addRoom,\r\n  deleteRoom,\r\n  analyzePhrase,\r\n} from \"../Request\";\r\nimport {\r\n  Layout,\r\n  Menu,\r\n  Spin,\r\n  Button,\r\n  Drawer,\r\n  Form,\r\n  Select,\r\n  Tabs,\r\n  Input,\r\n  message,\r\n  Modal,\r\n} from \"antd\";\r\nimport { ReactMic } from \"react-mic\";\r\n\r\nimport \"../styles/dashboard.css\";\r\n\r\nimport {\r\n  MenuOutlined,\r\n  HomeOutlined,\r\n  PlusOutlined,\r\n  DeleteOutlined,\r\n  CloseOutlined,\r\n  MinusCircleTwoTone,\r\n  MessageOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\nconst { Header, Sider, Content } = Layout;\r\nconst { TabPane } = Tabs;\r\n\r\nconst Dashboard = () => {\r\n  \r\n  const [collapsed, setCollapsed] = React.useState(false);\r\n  const [available, setAvailable] = React.useState(false);\r\n  const [currentRoomID, setCurrentRoomID] = React.useState();\r\n  const [rooms, setRooms] = React.useState([]);\r\n  const [roomData, setRoomData] = React.useState({});\r\n  const [activeTab, setActiveTab] = React.useState(1);\r\n  const [addCompOpen, setAddCompOpen] = React.useState(false);\r\n  const [delComp, setDelComp] = React.useState(false);\r\n  const [display, setDisplay] = React.useState(false);\r\n  const [showAnalyze, setShowAnalyze] = React.useState(false);\r\n  const [loadingAnalyze, setLoadingAnalyze] = React.useState(false);\r\n  const [refresh, setRefresh] = React.useState(false);\r\n\r\n  //record states\r\n  const [isRecording, setIsRecording] = React.useState(false);\r\n  const [isComputing, setIsComputing] = React.useState(false);\r\n\r\n  const tabs = { 1: \"addRoomForm\", 2: \"addCompForm\" };\r\n  const [form] = Form.useForm();\r\n\r\n  const refreshRooms = async () => {\r\n    let response = await getRooms();\r\n    setRooms(response.data);\r\n    return response;\r\n  };\r\n\r\n  const roomDelete = async (roomID) => {\r\n    await deleteRoom(roomID);\r\n    await refreshRooms();\r\n  };\r\n\r\n  const toggleCollapsed = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  const handleTabs = (id) => {\r\n    setActiveTab(id);\r\n  };\r\n\r\n  const changeRoom = async (roomID) => {\r\n    let tmp = await getRoomByID(roomID);\r\n    setRoomData(tmp.data);\r\n    setCurrentRoomID(tmp.data.id);\r\n    setRefresh(!refresh);\r\n  };\r\n\r\n  const handleAnalyze = async (values) => {\r\n    setLoadingAnalyze(true);\r\n    let res = await analyzePhrase(JSON.stringify({ phrase: values.phrase }));\r\n    if (res.data.ERROR) {\r\n      message.error(\"I didn't understand!\");\r\n    } else {\r\n      setShowAnalyze(false);\r\n      if (res.data.roomID === currentRoomID) changeRoom(res.data.roomID);\r\n      else if (res.data.roomID === 0) changeRoom(currentRoomID);\r\n      message.success(\"Command executed\");\r\n    }\r\n    setLoadingAnalyze(false);\r\n  };\r\n\r\n  const handleSubmit = async (values) => {\r\n    console.log(values);\r\n    var requestError = false;\r\n    switch (values.device) {\r\n      case \"light\":\r\n        await addLight(\r\n          JSON.stringify({ room: values.room, name: values.lightName })\r\n        );\r\n        break;\r\n      case \"thermostat\":\r\n        await addThermostat(JSON.stringify({ room: values.room })).catch(\r\n          (error) => {\r\n            message.error(\"Another thermostat already exists!\");\r\n            requestError = true;\r\n          }\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    if (values.room === currentRoomID) {\r\n      changeRoom(values.room);\r\n    }\r\n    if (!requestError) setAddCompOpen(false);\r\n    setDisplay(false);\r\n  };\r\n\r\n  const addRoomHandle = async (values) => {\r\n    var requestError = false;\r\n    await addRoom(JSON.stringify({ name: values.room.toLowerCase() })).catch(\r\n      (error) => {\r\n        message.error(\"A room with the same name already exists!\");\r\n        requestError = true;\r\n      }\r\n    );\r\n    await refreshRooms();\r\n    if (!requestError) setAddCompOpen(false);\r\n    setDisplay(false);\r\n  };\r\n\r\n  const renderRoomComponents = (component) => {\r\n    if (Object.keys(roomData).length !== 0 && roomData.constructor === Object) {\r\n      switch (component) {\r\n        case \"light\":\r\n          return roomData.lights.map((item) => {\r\n            return (\r\n              <Light\r\n                key={item.id}\r\n                data={item}\r\n                delete={delComp}\r\n                refresh={refresh}\r\n              />\r\n            );\r\n          });\r\n        case \"thermostat\":\r\n          return roomData.thermostats.map((item) => {\r\n            return (\r\n              <Thermostat\r\n                key={item.id}\r\n                data={item}\r\n                delete={delComp}\r\n                refresh={refresh}\r\n              />\r\n            );\r\n          });\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const audioRecognize = async (audio) => {\r\n    setIsComputing(true);\r\n    console.log(audio);\r\n    var fd = new FormData();\r\n    fd.append(\"audio\", audio.blob);\r\n    await recognizeAudio(fd).then((res) => {\r\n      console.log(res.data);\r\n      form.setFieldsValue({\r\n        phrase: res.data.transcription,\r\n      });\r\n      setIsComputing(false);\r\n    });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    async function initialSetup() {\r\n      let tmpRooms = await refreshRooms();\r\n      if (tmpRooms.data.length > 0) {\r\n        setCurrentRoomID(tmpRooms.data[0].id);\r\n        await changeRoom(tmpRooms.data[0].id);\r\n      }\r\n      setAvailable(true);\r\n    }\r\n    initialSetup();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {available === false ? (\r\n        <Spin size=\"large\" className=\"loadBox\" />\r\n      ) : (\r\n        <Layout style={{ height: \"100%\", flexWrap: \"wrap\" }}>\r\n          <Sider\r\n            trigger={null}\r\n            collapsible\r\n            collapsed={collapsed}\r\n            collapsedWidth={0}\r\n            style={{ overflow: \"auto\" }}\r\n          >\r\n            <div\r\n              style={{\r\n                padding: \"20px 24px\",\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                alignItems: \"flex-end\",\r\n              }}\r\n            >\r\n              <HomeOutlined style={{ fontSize: \"25px\", color: \"#ffffff\" }} />\r\n              <p\r\n                style={{\r\n                  color: \"white\",\r\n                  padding: \"0px 10px\",\r\n                  margin: 0,\r\n                  fontSize: \"bold\",\r\n                }}\r\n              >\r\n                <strong>Rooms</strong>\r\n              </p>\r\n            </div>\r\n            <Menu\r\n              theme=\"dark\"\r\n              mode=\"inline\"\r\n              defaultSelectedKeys={[String(currentRoomID)]}\r\n              selectable={!delComp}\r\n              onClick={(e) => {\r\n                if (!delComp) {\r\n                  changeRoom(e.key);\r\n                  setDelComp(false);\r\n                }\r\n              }}\r\n            >\r\n              {rooms.length > 0\r\n                ? rooms.map((room) => {\r\n                    return (\r\n                      <Menu.Item\r\n                        key={room.id}\r\n                        style={{\r\n                          margin: 0,\r\n                          display: \"flex\",\r\n                          flexDirection: \"row\",\r\n                          justifyContent: \"space-between\",\r\n                          alignItems: \"center\",\r\n                        }}\r\n                      >\r\n                        {room.name.charAt(0).toUpperCase() + room.name.slice(1)}\r\n                        {delComp ? (\r\n                          <Button\r\n                            size=\"small\"\r\n                            danger\r\n                            type=\"text\"\r\n                            icon={\r\n                              <MinusCircleTwoTone\r\n                                twoToneColor=\"#ff0000\"\r\n                                style={{ marginRight: 0 }}\r\n                              />\r\n                            }\r\n                            onClick={(e) => {\r\n                              roomDelete(room.id);\r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          false\r\n                        )}\r\n                      </Menu.Item>\r\n                    );\r\n                  })\r\n                : false}\r\n            </Menu>\r\n          </Sider>\r\n          <Layout className=\"site-layout\">\r\n            <Header\r\n              className=\"site-layout-background\"\r\n              style={{\r\n                padding: 0,\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              {React.createElement(collapsed ? MenuOutlined : MenuOutlined, {\r\n                className: \"trigger\",\r\n                onClick: toggleCollapsed,\r\n              })}\r\n              <h2 style={{ fontWeight: \"bold\" }}>\r\n                {Object.keys(roomData).length !== 0 &&\r\n                roomData.constructor === Object\r\n                  ? roomData.name.charAt(0).toUpperCase() +\r\n                    roomData.name.slice(1)\r\n                  : false}\r\n              </h2>\r\n            </Header>\r\n            <Content\r\n              className=\"site-layout-background\"\r\n              style={{\r\n                margin: \"16px 16px\",\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                background: \"#f0f2f5\",\r\n                flexWrap: \"wrap\",\r\n                overflow: \"auto\",\r\n              }}\r\n            >\r\n              {renderRoomComponents(\"light\")}\r\n              {renderRoomComponents(\"thermostat\")}\r\n              <Modal\r\n                title=\"Type a command to execute\"\r\n                visible={showAnalyze}\r\n                footer={false}\r\n                onCancel={(e) => {\r\n                  !loadingAnalyze && setShowAnalyze(false);\r\n                }}\r\n                bodyStyle={{ padding: \"24px\" }}\r\n                destroyOnClose=\"true\"\r\n              >\r\n                <Form id=\"analyzeForm\" onFinish={handleAnalyze} form={form}>\r\n                  <Form.Item\r\n                    name=\"phrase\"\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: \"Please insert a command to execute\",\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <TextArea\r\n                      rows={4}\r\n                      allowClear=\"true\"\r\n                      placeholder=\"e.g. Turn on Kitchen lights\"\r\n                    />\r\n                  </Form.Item>\r\n                  <ReactMic\r\n                    record={isRecording}\r\n                    className=\"audio-wave\"\r\n                    mimeType=\"audio/webm\"\r\n                    onStop={(audioRecorded) => audioRecognize(audioRecorded)}\r\n                    noiseSuppression={true}\r\n                  />\r\n                  <div\r\n                    style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                  >\r\n                    <Button\r\n                      onClick={(e) => setIsRecording(!isRecording)}\r\n                      type=\"primary\"\r\n                      loading={isComputing}\r\n                    >\r\n                      {!isRecording ? \"Record\" : \"Stop Recording\"}\r\n                    </Button>\r\n                    <Form.Item\r\n                      style={{\r\n                        textAlign: \"right\",\r\n                        marginRight: 10,\r\n                        marginBottom: 0,\r\n                      }}\r\n                    >\r\n                      <Button\r\n                        type=\"default\"\r\n                        onClick={(e) => {\r\n                          !loadingAnalyze && setShowAnalyze(false);\r\n                        }}\r\n                        style={{ marginRight: 10 }}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                      <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        loading={loadingAnalyze}\r\n                      >\r\n                        Submit\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </div>\r\n                </Form>\r\n              </Modal>\r\n              <Button\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size={\"large\"}\r\n                className=\"commandBtn\"\r\n                onClick={(e) => setShowAnalyze(true)}\r\n              >\r\n                <MessageOutlined />\r\n              </Button>\r\n              <Button\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size={\"large\"}\r\n                className=\"delBtn\"\r\n                danger\r\n                onClick={(e) => setDelComp(!delComp)}\r\n              >\r\n                {delComp ? <CloseOutlined /> : <DeleteOutlined />}\r\n              </Button>\r\n              <Button\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size={\"large\"}\r\n                className=\"addBtn\"\r\n                onClick={(e) => {\r\n                  setAddCompOpen(true);\r\n                  setDelComp(false);\r\n                }}\r\n              >\r\n                <PlusOutlined />\r\n              </Button>\r\n              <Drawer\r\n                width={360}\r\n                onClose={(e) => {\r\n                  setAddCompOpen(false);\r\n                  setDisplay(false);\r\n                }}\r\n                visible={addCompOpen}\r\n                destroyOnClose=\"true\"\r\n                bodyStyle={{ paddingTop: 5 }}\r\n                footer={\r\n                  <div\r\n                    style={{\r\n                      textAlign: \"right\",\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      onClick={(e) => {\r\n                        setAddCompOpen(false);\r\n                        setDisplay(false);\r\n                      }}\r\n                      style={{ marginRight: 8 }}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      type=\"primary\"\r\n                      htmlType=\"submit\"\r\n                      form={tabs[activeTab]}\r\n                    >\r\n                      Submit\r\n                    </Button>\r\n                  </div>\r\n                }\r\n              >\r\n                <Tabs defaultActiveKey=\"1\" onChange={handleTabs}>\r\n                  <TabPane tab=\"Add room\" key=\"1\">\r\n                    <Form\r\n                      layout=\"vertical\"\r\n                      onFinish={addRoomHandle}\r\n                      onFinishFailed={(e) => setAddCompOpen(true)}\r\n                      id=\"addRoomForm\"\r\n                    >\r\n                      <Form.Item\r\n                        name=\"room\"\r\n                        label=\"Room\"\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Please choose a name for your room\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input placeholder=\"Room name\" />\r\n                      </Form.Item>\r\n                    </Form>\r\n                  </TabPane>\r\n                  <TabPane tab=\"Add device\" key=\"2\">\r\n                    <Form\r\n                      layout=\"vertical\"\r\n                      onFinish={handleSubmit}\r\n                      onFinishFailed={(e) => setAddCompOpen(true)}\r\n                      id=\"addCompForm\"\r\n                    >\r\n                      <Form.Item\r\n                        name=\"room\"\r\n                        label=\"Room\"\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Please select a room to add\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Select placeholder=\"Select the room\">\r\n                          {rooms.map((room) => {\r\n                            return (\r\n                              <Option key={room.id} value={room.id}>\r\n                                {room.name.charAt(0).toUpperCase() +\r\n                                  room.name.slice(1)}\r\n                              </Option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                      </Form.Item>\r\n                      <Form.Item\r\n                        name=\"device\"\r\n                        label=\"Smart device type\"\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Please select a device to add\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Select\r\n                          placeholder=\"Select the smart device type\"\r\n                          onChange={(value) => {\r\n                            value === \"light\"\r\n                              ? setDisplay(true)\r\n                              : setDisplay(false);\r\n                          }}\r\n                        >\r\n                          <Option value=\"light\">Light</Option>\r\n                          <Option value=\"thermostat\">Thermostat</Option>\r\n                        </Select>\r\n                      </Form.Item>\r\n                      {display ? (\r\n                        <Form.Item\r\n                          name=\"lightName\"\r\n                          label=\"Light Name\"\r\n                          rules={[\r\n                            {\r\n                              required: true,\r\n                              message: \"Please choose a name for your light\",\r\n                            },\r\n                          ]}\r\n                        >\r\n                          <Input placeholder=\"Light name\" />\r\n                        </Form.Item>\r\n                      ) : (\r\n                        false\r\n                      )}\r\n                    </Form>\r\n                  </TabPane>\r\n                </Tabs>\r\n              </Drawer>\r\n            </Content>\r\n          </Layout>\r\n        </Layout>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard;","C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\Request.js",[],"C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\components\\Thermostat.js",["38","39"],"import React from \"react\";\r\nimport { Card, Slider, Button } from \"antd\";\r\nimport {\r\n  CircularProgressbarWithChildren,\r\n  buildStyles,\r\n} from \"react-circular-progressbar\";\r\nimport { FireOutlined, MinusCircleTwoTone } from \"@ant-design/icons\";\r\nimport {\r\n  updateThermostatInfo,\r\n  getThermostatInfo,\r\n  deleteThermostat,\r\n} from \"../Request\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\n\r\nconst Thermostat = (props) => {\r\n  const [thermostatInfo, setThermostatInfo] = React.useState(props.data);\r\n  const [tempSet, setTempSet] = React.useState(props.data.temperature_set);\r\n  const [available, setAvailable] = React.useState(true);\r\n\r\n  const thermostatDelete = async (thermostatID) => {\r\n    await deleteThermostat(thermostatID);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    async function initialSetup(){\r\n      let response = await getThermostatInfo(props.data.id);\r\n      setThermostatInfo(response.data);\r\n      setTempSet(response.data.temperature_set);\r\n    }\r\n    initialSetup()\r\n  }, [props.refresh]);\r\n\r\n  React.useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      let response = await getThermostatInfo(props.data.id);\r\n      setThermostatInfo(response.data);\r\n      setTempSet(response.data.temperature_set);\r\n    }, 13000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {available ? (\r\n        <Card\r\n          title={\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <p style={{ margin: 0 }}>Thermostat</p>\r\n              {props.delete ? (\r\n                <Button\r\n                  size=\"small\"\r\n                  danger\r\n                  type=\"text\"\r\n                  icon={\r\n                    <MinusCircleTwoTone\r\n                      twoToneColor=\"#ff0000\"\r\n                      onClick={(e) => {\r\n                        thermostatDelete(thermostatInfo.id);\r\n                        setAvailable(false);\r\n                      }}\r\n                    />\r\n                  }\r\n                />\r\n              ) : (\r\n                <FireOutlined />\r\n              )}\r\n            </div>\r\n          }\r\n          bordered={false}\r\n          style={{\r\n            width: 200,\r\n            margin: \"20px 10px\",\r\n            height: \"330px\",\r\n            borderRadius: \"10px\",\r\n          }}\r\n        >\r\n          <CircularProgressbarWithChildren\r\n            value={thermostatInfo.actual_temperature}\r\n            minValue=\"10\"\r\n            maxValue=\"30\"\r\n            circleRatio={0.75}\r\n            styles={buildStyles({\r\n              rotation: 1 / 2 + 1 / 8,\r\n              trailColor: \"#eee\",\r\n            })}\r\n          >\r\n            <p\r\n              style={{\r\n                fontSize: 20,\r\n                color: \"#3e98c7\",\r\n                textAlign: \"center\",\r\n                paddingTop: 20,\r\n              }}\r\n            >\r\n              <strong>\r\n                Current\r\n                <br />\r\n                {thermostatInfo.actual_temperature}°\r\n              </strong>\r\n            </p>\r\n          </CircularProgressbarWithChildren>\r\n          <h4 style={{ margin: 0 }}>Set temperature</h4>\r\n          <Slider\r\n            value={tempSet}\r\n            min={10}\r\n            max={30}\r\n            marks={{ 10: \"10\", 30: \"30\" }}\r\n            onChange={(val) => setTempSet(val)}\r\n            onAfterChange={(val) =>\r\n              updateThermostatInfo(\r\n                thermostatInfo.id,\r\n                JSON.stringify({ temperature_set: val })\r\n              )\r\n            }\r\n          />\r\n        </Card>\r\n      ) : (\r\n        false\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Thermostat;\r\n",["40","41"],"C:\\Users\\Anto\\Desktop\\Things\\stage\\task-2 stage\\automationui\\src\\components\\Light.js",["42"],"import React from \"react\";\r\nimport { Card, Slider, Switch, Button } from \"antd\";\r\nimport { BulbOutlined, MinusCircleTwoTone } from \"@ant-design/icons\";\r\nimport { updateLightInfo, deleteLight, getLightInfo } from \"../Request\";\r\n\r\nconst Light = (props) => {\r\n  const [checked, setChecked] = React.useState(props.data.light_status);\r\n  const [brightness, setBrightness] = React.useState(props.data.brightness);\r\n  const [lightInfo, setLightInfo] = React.useState(props.data);\r\n  const [available, setAvailable] = React.useState(true);\r\n\r\n  const lightDelete = async (lightID) => {\r\n    await deleteLight(lightID);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    async function initialSetup(){\r\n      getLightInfo(props.data.id).then(res => {\r\n        setLightInfo(res.data);\r\n        setChecked(res.data.light_status);\r\n        setBrightness(res.data.brightness);\r\n      });\r\n    }\r\n    initialSetup()\r\n  }, [props.refresh]);\r\n\r\n  return (\r\n    <>\r\n      {available ? (\r\n        <Card\r\n          style={{\r\n            width: 200,\r\n            margin: \"20px 10px\",\r\n            height: \"330px\",\r\n            borderRadius: \"10px\",\r\n          }}\r\n          title={\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <p style={{ margin: 0 }}>{lightInfo.name}</p>\r\n              {props.delete ? (\r\n                <Button\r\n                  size=\"small\"\r\n                  danger\r\n                  type=\"text\"\r\n                  icon={<MinusCircleTwoTone twoToneColor=\"#ff0000\" />}\r\n                  onClick={(e) => {\r\n                    lightDelete(lightInfo.id);\r\n                    setAvailable(false);\r\n                  }}\r\n                />\r\n              ) : (\r\n                <BulbOutlined />\r\n              )}\r\n            </div>\r\n          }\r\n          bordered={false}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              marginBottom: 20,\r\n              paddingRight: 5,\r\n            }}\r\n          >\r\n            <h4 style={{ margin: 0 }}>Status</h4>\r\n            <Switch\r\n              checked={checked}\r\n              checkedChildren=\"ON\"\r\n              unCheckedChildren=\"OFF\"\r\n              onChange={(val) => {\r\n                updateLightInfo(\r\n                  lightInfo.id,\r\n                  JSON.stringify({ light_status: val })\r\n                );\r\n                setChecked(val);\r\n              }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <h4>Brightness</h4>\r\n            <Slider\r\n              disabled={!checked}\r\n              value={checked ? brightness : 0}\r\n              marks={{ 0: \"0%\", 100: \"100%\" }}\r\n              onChange={(val) => setBrightness(val)}\r\n              onAfterChange={(val) =>\r\n                updateLightInfo(\r\n                  lightInfo.id,\r\n                  JSON.stringify({ brightness: val })\r\n                )\r\n              }\r\n            />\r\n          </div>\r\n        </Card>\r\n      ) : (\r\n        false\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Light;\r\n",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":203,"column":6,"nodeType":"49","endLine":203,"endColumn":8,"suggestions":"50"},{"ruleId":"47","severity":1,"message":"51","line":31,"column":6,"nodeType":"49","endLine":31,"endColumn":21,"suggestions":"52"},{"ruleId":"47","severity":1,"message":"51","line":40,"column":6,"nodeType":"49","endLine":40,"endColumn":8,"suggestions":"53"},{"ruleId":"43","replacedBy":"54"},{"ruleId":"45","replacedBy":"55"},{"ruleId":"47","severity":1,"message":"51","line":25,"column":6,"nodeType":"49","endLine":25,"endColumn":21,"suggestions":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'changeRoom'. Either include it or remove the dependency array.","ArrayExpression",["59"],"React Hook React.useEffect has a missing dependency: 'props.data.id'. Either include it or remove the dependency array.",["60"],["61"],["57"],["58"],["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},{"desc":"65","fix":"69"},"Update the dependencies array to be: [changeRoom]",{"range":"70","text":"71"},"Update the dependencies array to be: [props.data.id, props.refresh]",{"range":"72","text":"73"},"Update the dependencies array to be: [props.data.id]",{"range":"74","text":"75"},{"range":"76","text":"73"},[5489,5491],"[changeRoom]",[1000,1015],"[props.data.id, props.refresh]",[1313,1315],"[props.data.id]",[897,912]]